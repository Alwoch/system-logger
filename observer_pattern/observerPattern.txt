The observer pattern:
 defines one to many dependency between objects so that when one object changes state, all of its dependents are notified and updated automatically

problems solved by the pattern
1. high coupling
2. low cohesion
3. direct dependency
4. non uniform updates
5. delayed updates 
6. manual and tiresome updates

Goals:
1. Define a one to many dependency between objects
2. when the observable object changes state, all its observers should be notified and updated aautomatically

components of any observable object
1. internal main state
2. List or collection of observers
3. A mechanism for adding an observer from the list of observers (subscribing)
4. A mechanism for removing an observer from the list of observers (unsubscribing)
5. A mechanism for notifying all observers of the observable internal state of change
6. A mechanism for triggering the notification of all observers of the observable internal state of change
7. a mechanism for causing the change in state of the observable

components of the observer object
1. A mechanism for receiving notifications or updates from the observable , of the observable internal state change

Application
1. Mailing systems
2. Push notification systems
4. News publishing systems
5. Weather updates systems
6. Social media platform notification feature
7. Socket programming

steps
Step 1: 
Create an abstract Type (interface or abstract class) for any possible observer, with a 	method declaration for receiving updates or notification.

Step 2: 
You can optionally create an abstract type (interface or abstract class) for all the 	mechanisms an Observable must contain.

Step 3: 
Create the class to act as the observable.

Step 4: 
With in the observable class, define the Main State of the observable.

Step 5: 
With in the observable class, define the List or collection of Observers.

Step 6: 
With in the observable class, define the mechanism for adding an Observer to the list of 	Observers.

Step 7: 
With in the observable class, define the mechanism for removing an Observer from the list of Observers.

Step 8: 
With in the observable class, define the mechanism for 
From Refactory Bootcamp to Everyone 09:14 AM

Step 11:
 Create concrete implementations of the observer super type while specifying what happens (on receiving update or with updates)

Step 12:
 Create an observable object (Instantiate Observable).

Step 13: 
Create observer objects (Instantiate Observer) .

Step 14: 
subscribe observers to observable.

Step 14: 
Test to see whether the Observer pattern has been implemented successfully. Try to invoke the method that causes change in the observable and see whether all the subscribers (observers) receive notification about the changes.



